#62 Погода. Верстка

Сегодня начнем делать программу побольше.

Погодное приложение, с поиском городов, детальной сводкой и 
главное: сетевыми запросами. Ну еще и с сохранением городов

Начнем с верстки. Предлагаю сделать 2 первых экрана сегодня (Now и Details) 
Никакой логики, только верстка.

https://www.figma.com/file/Wio9K8x83Mrktczh6QOrjH/Untitled-(Copy)?node-id=0%3A1

Figma (https://www.figma.com/file/Wio9K8x83Mrktczh6QOrjH/Untitled-(Copy)?node-id=0%3A1)
Untitled (Copy)
Created with Figma

----------------------

#63 Погода. запрос города по API

Пора запросить хотя бы один город из строки поиска. Ничего сложного - вы 
уже делали все это в прошлых практических задачах.

Первое - ввдоим что-то в строку поиска, по нажатию на Enter - берем имя 
города из этой строки

Второе - подставляем это имя в url через шаблонные строки и делаем запрос 
на сервер

const serverUrl = 'http://api.openweathermap.org/data/2.5/weather';
const cityName = 'boston';
const apiKey = 'f660a2fb1e4bad108d6160b7f58c555f';
const url = `${serverUrl}?q=${cityName}&appid=${apiKey}`;

Третье - результат записываем в любую переменную и выводим нужную информацию 
в табе 'Now' согластно верстке

Остальные табы трогать не надо

-----------------------------

#64 Погода. Ошибки и несуществующие города

Типичная обработка ошибок запроса по сети 

Для простоты будем показывать пользователю обычный alert (потом научимся делать 
круче)

Но, перед этим прочитайте тему про обработку ошибок в промисах и используйте 
эту технику
https://learn.javascript.ru/promise-error-handling

Чтобы имитировать ошибку и проверить себя - поменяйте что-то в url, например 
адрес сервера

А ещё можно показывать alert если такого города не нашлось

learn.javascript.ru (https://learn.javascript.ru/promise-error-handling)
Промисы: обработка ошибок
Цепочки промисов отлично подходят для перехвата ошибок. Если промис завершается 
с ошибкой, то управление переходит в ближайший обработчик ошибок.

--------------------

#65 Погода. Избранное

Добавим возмодность добавлять города, чтобы не вписывать их вручную 
в строку поиска каждый раз. 
Узнаете? Это ж ровно то же самое что вы делали в ТУДУ листе. Можете 
использовать ту же логику, а можете написать все с полного нуля. 

По клику на иконку с сердцем добавляйте города в список справа, по 
клику на крестик рядом с именем города в этом списке - удаляйте его 
навсегда 

По клику на сам город - добавляйте его данные в окно 'Now'

Вот вы уже пол программы и написали, не сложно же?)

-----------------------

#67 Погода. Сохранение состояния 

Сейчас после перезагрузки страницы все ваши города исчезают и это 
ужасно не удобно.

localStorage - отличное место для хранения этой информации в браузере
 - добавленные в избранное города всегда будут на своем месте.
А еще, давайте сохранять текущий "выбранный" город и после перезагрузки 
снова делать выбранным именно его 

Для работы с localStorage можно создать отдельный модуль, чтобы не 
сваливать все в кучу. Да и выглядеть это будет ой как красиво 

storage.saveFavoriteCities(favoriteCities)
const favoriteCities = storage.getFavoriteCities();
const currentCity = storage.getCurrentCity();

Это просто пример, делайте как сами считаете нужным.

------------------

#68 Погода. Детали

Мы уже получаем всю информацию про нужный город, но пока выводим только 
главную информацию о нем. Пришло время наполнить жизнью вкладку 'Details' 

Уверен, вы уже знаете что делать и задача будет достаточно простой, 
поэтому вот вам задача еще:
Прочитайте про "другую разновидность функций" (уверен, вы уже используете это)

https://learn.javascript.ru/function-expressions

learn.javascript.ru (https://learn.javascript.ru/function-expressions)
Function Expression
Функция в JavaScript – это не магическая языковая структура, а особого 
типа значение.

-----------------------

#69 Погода. Расписание (верстка)

Кто-то из вас уже сверстал все 3 таба. Хотя задачи такой не было. 

Сверстайте 3-й таб 'Forecast'. Пока просто сверстайте.

Ну а чтобы совсем скучно не было от этой верстки, вот вам немного 
полезной теории (которую, возможно, вы уже знаете) 

https://learn.javascript.ru/arrow-functions-basics

learn.javascript.ru (https://learn.javascript.ru/arrow-functions-basics)
Функции-стрелки, основы
Существует ещё более простой и краткий синтаксис для создания функций, 
который часто лучше, чем синтаксис Function Expression.

-----------------------

#70 Погода. Расписание (логика)

По примеру с табом 'Details' сделайте таб 'Forecast' - здесь будет 
похожая логика, только набор данных чуть больше. Уверен вы 
запросто справитесь 

А вот вам несколько советов по стилю кода (если вы были на эфирах, 
то знаете многое из этого)
https://learn.javascript.ru/coding-style

-----------------------

#71 Погода. Все вместе

К этому дню все должно работать как задумано. 

Если это не так - доделывайте вашу программу и обязательно 
обращайтесь за помощью в чат. 
Если все уже готово - посмотрите на свой код еще раз. Представьте 
что его будет обслуживать и поддерживать серийный убийца, 
который знает где вы живете.
Сделайте выводы и привидите код в порядок. 

В этом здорово может помочь деструктуризация 
(ее вы видели в примерах кода)
https://learn.javascript.ru/destructuring-assignment

learn.javascript.ru (https://learn.javascript.ru/destructuring-assignment)
Деструктурирующее присваивание

-------------------------

#72 Синхронно записанная асинхронность 

такой синтаксис вы уже видели в примерах в других темах. Возможно 
кто-то из вас даже понял как это работает. Теперь настала пора 
понять это на все 100% 

https://learn.javascript.ru/async-await

Перепишите 1, 2 или сколько захотите ваших .then на async/await 
и не забудьте про try/catch

learn.javascript.ru (https://learn.javascript.ru/async-await)
Async/await
Существует специальный синтаксис для работы с промисами, 
который называется «async/await». Он удивительно прост для 
понимания и использования.

